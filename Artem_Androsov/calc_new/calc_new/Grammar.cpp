#include "Variable.h"									// Подключение файла, для работы с токенами и переменными.


int fact(int n)											// Функция для вычисления факториала числа.
{														//
	if (n < 0)											// Если число меньше 0
		return 0;										// то возвращаем 0.
	if (n == 0)											// Если число равно 0
		return 1;										// то возвращаем 1.
	else												// Иначе
		return n * fact(n - 1);							// рекурсивно вычисляем факториал.
}														//



double expression()										// Функция для вычисления выражения.
{														//
	double left = term();								// Вызов функции для вычисления левого операнда.
	Token t = ts.get();									// Счёт следующего токена.
	while (true)										//
	{													//
		switch (t.kind)									// 
		{												//
		case '+':										// Если потом слудует знак '+'
			left += term();								// то выполняем сложение с правым операндом.
			t = ts.get();								//
			break;										//
		case '-':										// Если потом слудует знак '-' 
			left -= term();								// то выполняем вычитание с правым операндом.
			t = ts.get();								//
			break;										//
		default:										//
			ts.putback(t);								// В иных случаях возвращаем лишь 
			return left;								// значение левого операнда.
		}												//
	}													//
}														//



double term()											// Функция для вычисления терма.
{														//
	double left = primary();							// Вызов функции для вычисления левого операнда.
	Token t = ts.get();									// Счёт следующего токена.
	while (true)										//
	{													//
		switch (t.kind)									// 
		{												//
		case '*':										// Если потом слудует знак '*'
			left *= primary();							// то выполняем умножение на правый операнд.
			t = ts.get();								//
			break;										//
		case '/':										// Если потом слудует знак '/' 
		{												// 
			double d = primary();						// то вычисляем значение правого операнда.
			if (d == 0)									//
			{											// Если оно равно 0,
				error("Deviding by zero");				// то возвращаем ошибку.
			}											//
			left /= d;									// Иначе выполняем деление.
			t = ts.get();								//
			break;										//
		}												//
		case '%':										// Если потом слудует знак '%' 
		{												// 
			int i1 = narrow_cast<int>(left);			// то преобразуем левый
			int i2 = narrow_cast<int>(primary());		// и правый операнды к целым числам.
			if (i2 == 0)								//
			{											// Если правый операнд равен 0,
				error("%: deviding by zero");			// то возвращаем ошибку. 
			}											//
			left = i1 % i2;								// Иначе выполняем деление.
			t = ts.get();								//
			break;										//
		}												//
		default:										//
			ts.putback(t);								// В иных случаях возвращаем лишь 
			return left;								// значение левого операнда.
		}												//
	}													//
}														//



double primary()										// Функция для вычисления первисного значения.
{														//
	Token t = ts.get();									// Считывание очередного токена.
	switch (t.kind)										//
	{													// Если он является:
	case '(':											// скобкой,
	{													//
		double d = expression();						// то вычисляем вырежение в скобках.
		t = ts.get();									// Если следующий токен
		if (t.kind != ')')								// не является скобкой -
		{												// 
			error("')' is needed");						// возвращаем ошибку;
		}												//
		return d;										//
	}													//
	case '@':											// символом '@',
	{													//
		double d = primary();							// то вычисляем следующее первичное значение
		if (d < 0)										// 
		{												// Если оно меньше 0 -
			error("sqrt: a negative number");			// возвращаем ошибку.
		}												// 
		return sqrt(d);									// Иначе вычисляем корень.
	}													//
	case '!':											// символом '!',
	{													//
		int d = narrow_cast<int>(primary());			// то вычисляем следующее первичное значение и преобразуем его в целове число.
		if (d < 0)										//
		{												// Если оно меньше 0 -
			error("fact: a negative number");			// возвращаем ошибку.
		}												//
		return fact(d);									// Иначе вычисляем факториал;
	}													//
	case number:										// числом,
		return t.value;									// то возвращаем число;
	case name:											// переменной,
		return get_value(t.name);						// то возвращаем значение переменной;
	case '-':											// символом '-',
		return -primary();								// то возвращаем отрицательное значение
	case '+':											// символом '+',
		return primary();								// то возвращаем значение следующего первичного выражения.
	default:											// Во всех других случаях 
		error("expression is needed");					// возвращаем ошибку.
	}													//
}														//
														//